// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock is a generated GoMock package.
package mock

import (
	raspberry "main/raspberry"
	http "net/http"
	reflect "reflect"
	job "shared/model/entity/job"
	raspberry0 "shared/model/entity/raspberry"
	work "shared/model/entity/work"

	gomock "github.com/golang/mock/gomock"
)

// MockParams is a mock of Params interface.
type MockParams struct {
	ctrl     *gomock.Controller
	recorder *MockParamsMockRecorder
}

// MockParamsMockRecorder is the mock recorder for MockParams.
type MockParamsMockRecorder struct {
	mock *MockParams
}

// NewMockParams creates a new mock instance.
func NewMockParams(ctrl *gomock.Controller) *MockParams {
	mock := &MockParams{ctrl: ctrl}
	mock.recorder = &MockParamsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParams) EXPECT() *MockParamsMockRecorder {
	return m.recorder
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Work mocks base method.
func (m *MockService) Work(arg0 raspberry0.Entity, arg1 job.Name, arg2 raspberry.Params) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Work", arg0, arg1, arg2)
}

// Work indicates an expected call of Work.
func (mr *MockServiceMockRecorder) Work(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Work", reflect.TypeOf((*MockService)(nil).Work), arg0, arg1, arg2)
}

// newEntity mocks base method.
func (m *MockService) newEntity(arg0 uint, arg1 job.Name, arg2 raspberry.Params) *work.Entity {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "newEntity", arg0, arg1, arg2)
	ret0, _ := ret[0].(*work.Entity)
	return ret0
}

// newEntity indicates an expected call of newEntity.
func (mr *MockServiceMockRecorder) newEntity(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "newEntity", reflect.TypeOf((*MockService)(nil).newEntity), arg0, arg1, arg2)
}

// newRequest mocks base method.
func (m *MockService) newRequest(arg0 raspberry0.Entity, arg1 *work.Entity) *http.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "newRequest", arg0, arg1)
	ret0, _ := ret[0].(*http.Request)
	return ret0
}

// newRequest indicates an expected call of newRequest.
func (mr *MockServiceMockRecorder) newRequest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "newRequest", reflect.TypeOf((*MockService)(nil).newRequest), arg0, arg1)
}
