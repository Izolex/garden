// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mock is a generated GoMock package.
package mock

import (
	work "main/work"
	reflect "reflect"
	periphery "shared/model/entity/periphery"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Measurement mocks base method.
func (m *MockStore) Measurement(arg0 work.Id, arg1 periphery.Name, arg2 float32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Measurement", arg0, arg1, arg2)
}

// Measurement indicates an expected call of Measurement.
func (mr *MockStoreMockRecorder) Measurement(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Measurement", reflect.TypeOf((*MockStore)(nil).Measurement), arg0, arg1, arg2)
}
