// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package mock is a generated GoMock package.
package mock

import (
	work "main/work"
	reflect "reflect"
	job "shared/model/entity/job"

	gomock "github.com/golang/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockManager) Do(arg0 work.Id, arg1 job.Name, arg2 work.Params) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockManagerMockRecorder) Do(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockManager)(nil).Do), arg0, arg1, arg2)
}

// GetRunnersCount mocks base method.
func (m *MockManager) GetRunnersCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunnersCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetRunnersCount indicates an expected call of GetRunnersCount.
func (mr *MockManagerMockRecorder) GetRunnersCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunnersCount", reflect.TypeOf((*MockManager)(nil).GetRunnersCount))
}

// Run mocks base method.
func (m *MockManager) Run() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run")
}

// Run indicates an expected call of Run.
func (mr *MockManagerMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockManager)(nil).Run))
}

// StopAll mocks base method.
func (m *MockManager) StopAll() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopAll")
}

// StopAll indicates an expected call of StopAll.
func (mr *MockManagerMockRecorder) StopAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopAll", reflect.TypeOf((*MockManager)(nil).StopAll))
}
