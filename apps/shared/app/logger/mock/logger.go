// Code generated by MockGen. DO NOT EDIT.
// Source: logger.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockLogger) Error(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", arg0)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), arg0)
}

// ErrorCtx mocks base method.
func (m *MockLogger) ErrorCtx(err error, ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ErrorCtx", err, ctx)
}

// ErrorCtx indicates an expected call of ErrorCtx.
func (mr *MockLoggerMockRecorder) ErrorCtx(err, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorCtx", reflect.TypeOf((*MockLogger)(nil).ErrorCtx), err, ctx)
}

// Info mocks base method.
func (m *MockLogger) Info(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info", arg0)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), arg0)
}

// MockStopper is a mock of Stopper interface.
type MockStopper struct {
	ctrl     *gomock.Controller
	recorder *MockStopperMockRecorder
}

// MockStopperMockRecorder is the mock recorder for MockStopper.
type MockStopperMockRecorder struct {
	mock *MockStopper
}

// NewMockStopper creates a new mock instance.
func NewMockStopper(ctrl *gomock.Controller) *MockStopper {
	mock := &MockStopper{ctrl: ctrl}
	mock.recorder = &MockStopperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStopper) EXPECT() *MockStopperMockRecorder {
	return m.recorder
}

// Stop mocks base method.
func (m *MockStopper) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockStopperMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockStopper)(nil).Stop))
}
